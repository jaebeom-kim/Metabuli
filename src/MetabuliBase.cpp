#include "Command.h"
#include "LocalCommandDeclarations.h"
#include "LocalParameters.h"
#include "DownloadDatabase.h"
#include "CommandDeclarations.h"
#include "Prefiltering.h"

#include "metabulidatabases.sh.h"

LocalParameters& localPar = LocalParameters::getLocalInstance();

std::vector<Command> metabuliCommands = {
        {"databases", databases, &localPar.databases, COMMAND_DATABASE_CREATION,
         "List and download databases",
         nullptr,
         "Milot Mirdita <milot@mirdita.de>",
         "<i:Name> <o:OUTDIR> <tmpDir>",
         CITATION_SPACEPHARER, 
         {{"selection", 0, DbType::ZERO_OR_ALL, &DbValidator::empty },
          {"sequenceDB", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::sequenceDb },
          {"tmpDir", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory }}},
        {"build", build, &localPar.build, COMMAND_DATABASE_CREATION,
                "Build database based on the list of FASTA files",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<database directory> <FASTA list> <accesssion2taxid>",
                CITATION_SPACEPHARER,
                {{"Directory where the DB will be generated", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::empty},
                 {"A list of FASTA files", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"Mapping file (accession to tax ID)", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"updateDB", updateDB, &localPar.updateDB, COMMAND_DATABASE_CREATION,
                "Add new sequences to an existing database",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                " <new database directory> <FASTA list> <accesssion2taxid> <old database directory>",
                CITATION_SPACEPHARER,
                {{"Directory to store new DB", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory},
                 {"A list of new FASTA files", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"Mapping file (accession to tax ID)", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"Old DB to which new sequences are to be added", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory}}},         
        {"makeAAoffset", makeAAoffset, &localPar.build, COMMAND_EXPERT,
                "Make AA offset file",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<diffIdx>",
                CITATION_SPACEPHARER,
                {{"Differential index", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::empty}}},
        {"expand_diffidx", expand_diffidx, &localPar.expand_diffidx, COMMAND_EXPERT,
                "expand differential index",
               nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<diffIdx>",
                CITATION_SPACEPHARER,
                {{"Differential index", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::empty}}},
        {"printInfo", printInfo, &localPar.printInfo, COMMAND_EXPERT,
                "Print k-mer information",
               nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<info>",
                CITATION_SPACEPHARER,
                {{"info", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},        
        {"database-report", databaseReport, &localPar.databaseReport, COMMAND_DATABASE_CREATION,
                "Generate a taxonomy report of a database",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i: database directory> ",
                CITATION_SPACEPHARER,
                {{"Directory where the DB will be generated", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"classify", classify, &localPar.classify, COMMAND_MAIN,
                "Assign taxonomic labels to query reads",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:query file(s)> <i:database directory> <o:output directory> <job ID> ",
                CITATION_SPACEPHARER,
                {{"FASTA/Q", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA | DbType::VARIADIC, &DbValidator::flatfile},
                 {"DB dir", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory},
                 {"out dir", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory},
                 {"job ID", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"extract", extract, &localPar.extract, COMMAND_FORMAT_CONVERSION,
                "Extract reads classified to a certain taxon (Used after classification)",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:query file(s)> <i:read-by-read result> <i:database directory>",
                CITATION_SPACEPHARER,
                {{"FASTA/Q", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA | DbType::VARIADIC, &DbValidator::flatfile},
                 {"read-by-read result", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"DB dir", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"grade", grade, &localPar.grade, COMMAND_EXPERT,
                "Grade the classification result (only for benchmarking)",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:Result list> <i:Answer sheet list> <i:Taxonomy Dir>",
                CITATION_SPACEPHARER,
                {{"read-classification", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"Mapping file (Query ID to tax ID)", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"taxonomy dir", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA | DbType::VARIADIC, &DbValidator::directory}}},
        {"gradeByCladeSize", gradeByCladeSize, &localPar.grade, COMMAND_EXPERT,
                "Grade the classification result (only for benchmarking)",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:Result list> <i:Answer sheet list> <Reference ASSACC list> <i:Taxonomy Dir>",
                CITATION_SPACEPHARER,
                {{"List of classification result files", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"List of answer sheets (Query ID 2 tax ID)", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"List of assembly accessions of reference sequences", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"Taxonomy directory", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA | DbType::VARIADIC, &DbValidator::directory}}},
        // {"add-to-library", addToLibrary, &localPar.addToLibrary, COMMAND_DATABASE_CREATION,
        //             "It bins sequences into files according to their species.",
        //             nullptr,
        //             "Jaebeom Kim <jbeom0731@gmail.com>",
        //             "<I: FASTA list> <I: accession2taxid> <I: DB DIR>",
        //             CITATION_SPACEPHARER,
        //             {{"List of absolute paths of files to be added. One path per line.", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
        //              {"NCBI style accession2taxid file. It should be consistent to tax dump files.", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
        //              {"DB directory", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"make-report", binning2report, &localPar.binning2report, COMMAND_FORMAT_CONVERSION,
                "Generate a Kraken-style taxonomy report using read-by-read classifications",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:Binning Result> <o:OUT DIR> <o:JOB ID> <i: TAXONOMY DIR> ",
                CITATION_SPACEPHARER,
                {{"Binning Result", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"OUT DIR", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory},
                        {"JOB ID", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                        {"TAXONOMY DIR", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"mapping2taxon", mapping2taxon, &localPar.mapping2taxon, COMMAND_EXPERT,
                    "It takes a mapping file (multiple targets for each read) and generates a read2taxon file (one target for each read)",
                nullptr,
                    "Jaebeom Kim <jbeom0731@gmail.com>",
                    "<i:mapping file> <i: taxonomy directory> ",
                    CITATION_SPACEPHARER,
                    {{"mapping file", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                     {"taxonomy directory", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"query2reference", query2reference, &localPar.query2reference, COMMAND_EXPERT,
                    "It inspects how the queried genomes are represented by the reference DB",
                nullptr,
                    "Jaebeom Kim <jbeom0731@gmail.com>",
                    "<i:query accessions> <i: reference accession> <i: accession2taxid> <i: taxonomy directory> ",
                    CITATION_SPACEPHARER,
                    {{"query accessions", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                     {"reference accession", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                     {"accession2taxid", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                     {"taxonomy directory", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"ictv-format", ictvFormat, &localPar.build, COMMAND_EXPERT,
                "Converts read-by-read classification result file to ICTV challenge format",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<result file>",
                CITATION_SPACEPHARER,
                {{"result file", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"taxdump", taxdump, &localPar.taxdump, COMMAND_TAXONOMY,
                "Generates taxonomy dump files (*.dmp) from a prebuilt taxonomyDB file",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:taxonomyDB>",
                CITATION_SPACEPHARER,
                {{"taxonomyDB", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"accession2taxid", accession2taxid, &localPar.accession2taxid, COMMAND_EXPERT,
                "Generates accession2taxid file from assembly accession list and assembly accession to taxid mapping file",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:assembly file list> <i:assembly accession to taxid mapping>",
                CITATION_SPACEPHARER,
                {{"assembly file list", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"assembly accession to taxid mapping", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"editNames", editNames, &localPar.editNames, COMMAND_EXPERT,
                "Edit gtdb-taxdump names.dmp file generated by taxonkit",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i:names.dmp> <i:taxid.map>",
                CITATION_SPACEPHARER,
                {{"names.dmp", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"taxid.map", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"createnewtaxalist", createnewtaxalist, &localPar.createnewtaxalist, COMMAND_EXPERT,
                "Create a accession2taxid and an input file for --new-taxa option",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com}",
                "<i: old database> <i: FASTA list> <i: new taxonomy dump> <i: accession2taxid> <o: output prefix>",
                CITATION_SPACEPHARER,
                {{"old database", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory},
                 {"FASTA list", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"new taxonomy dump", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory},
                 {"accession2taxid", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                 {"output prefix", DbType::ACCESS_MODE_OUTPUT, DbType::NEED_DATA, &DbValidator::flatfile}}},
        {"classifiedRefiner", classifiedRefiner, &localPar.classifiedRefiner, COMMAND_FORMAT_CONVERSION,
                "Refine read-by-read classification file",
                nullptr,
                "Siyoung Choi <remy0502@snu.ac.kr>",
                "<i: classified file> <i: taxonomy dump>",
                CITATION_SPACEPHARER,
                {{"classified file", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::flatfile},
                {"taxonomy dump", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory}}},
        {"validatedb", validateDatabase, &localPar.validateDatabase, COMMAND_DATABASE_CREATION,
                "Validate the database",
                nullptr,
                "Jaebeom Kim <jbeom0731@gmail.com>",
                "<i: database directory>",
                CITATION_SPACEPHARER,
                {{"database directory", DbType::ACCESS_MODE_INPUT, DbType::NEED_DATA, &DbValidator::directory}}}
};

std::vector<KmerThreshold> externalThreshold = {};

std::vector<DatabaseDownload> externalDownloads = {
        {
                "RefSeq",
                "NCBI RefSeq (Complete Genome/Chromosome level assemblies, prokaryote & virus) and a human genome (T2T-CHM13v2.0)",
                "O'Leary et al. Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation. Nucleic Acids Res. (2016)",
                "https://www.ncbi.nlm.nih.gov/refseq/",
                true, LocalParameters::DBTYPE_INDEX_DB, metabulidatabases_sh, metabulidatabases_sh_len,
                {}
        },
        {
                "GTDB",
                "GTDB 214.1 (Complete/Chromosome level only, CheckM completeness > 90 and contamination < 5) and a human genome (T2T-CHM13v2.0)",
                "Donovan et al. GTDB: an ongoing census of bacterial and archaeal diversity through a phylogenetically consistent, rank normalized and complete genome-based taxonomy. Nucleic Acids Res. (2022)",
                "https://gtdb.ecogenomic.org/",
                true, LocalParameters::DBTYPE_INDEX_DB, metabulidatabases_sh, metabulidatabases_sh_len,
                {}
        },
        {
                "RefSeq_virus",
                "NCBI RefSeq release 223 virus genomes and a human genome (T2T-CHM13v2.0)",
                "O'Leary et al. Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation. Nucleic Acids Res. (2016)",
                "https://www.ncbi.nlm.nih.gov/refseq/",
                true, LocalParameters::DBTYPE_INDEX_DB, metabulidatabases_sh, metabulidatabases_sh_len,
                {}
        },
        {
                "RefSeq_release",
                "NCBI release 224 (Prokaryote & Virus) and a human genome (T2T-CHM13v2.0)",
                "O'Leary et al. Reference sequence (RefSeq) database at NCBI: current status, taxonomic expansion, and functional annotation. Nucleic Acids Res. (2016)",
                "https://www.ncbi.nlm.nih.gov/refseq/",
                true, LocalParameters::DBTYPE_INDEX_DB, metabulidatabases_sh, metabulidatabases_sh_len,
                {}
        }
};


